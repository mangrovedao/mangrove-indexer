// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider        = "typegraphql-prisma"
  simpleResolvers = true
}

// data model

// Very few chains, it should not be hard to query
model Chain {
  id   Int    @id
  name String

  transactions Transaction[]
  accounts     Account[]
  mangroves    Mangrove[]
  tokens       Token[]
}

//Many transactions, we have id has private key and it is there for indexed. Not sure if we need other fields indexed.

model Transaction {
  id          String   @id @db.VarChar(255)
  chainId     Int      @unique @default(80001)
  txHash      String   @db.VarChar(80)
  from        String   @db.VarChar(80) // index?
  blockNumber Int
  blockHash   String   @db.VarChar(80)
  time        DateTime @db.Timestamp

  chain Chain @relation(fields: [chainId], references: [id])

  mangroveVersions        MangroveVersion[]
  takerApprovalVersions   TakerApprovalVersion[]
  makerBalanceVersions    MakerBalanceVersion[]
  offerListingVersions    OfferListingVersion[]
  offerVersions           OfferVersion[]
  orders                  Order[]
  MangroveOrderVersion    MangroveOrderVersion[]
  KandelVersion           KandelVersion[]
  DepositWithdrawalStatus TokenBalance[]
  KandelOfferIndex        KandelOfferIndex?
  TokenBalanceVersion     TokenBalanceVersion?
}

// probably have few tokens, so no extra index needed

model Token {
  id       String @id @db.VarChar(255)
  chainId  Int    @unique
  address  String @default("") @db.VarChar(80)
  symbol   String
  name     String
  decimals Int

  chain                      Chain              @relation(fields: [chainId], references: [id])
  offerListingsWhereInbound  OfferListing[]     @relation("OfferListingsByInboundToken")
  offerListingsWhereOutbound OfferListing[]     @relation("OfferListingsByOutboundToken")
  DepositWithdrawalStatus    TokenBalance[]
  kandelBase                 Kandel[]           @relation("base")
  kandelQuote                Kandel[]           @relation("quote")
  TokenBalanceEvent          TokenBalanceEvent?
}

// Few mangrove instances, no extra index needed

model Mangrove {
  id      String @id @db.VarChar(255)
  chainId Int    @unique @default(-1)
  address String @default("") @db.VarChar(80)

  chain          Chain           @relation(fields: [chainId], references: [id])
  offerListings  OfferListing[]
  offers         Offer[]
  orders         Order[]
  makerBalances  MakerBalance[]
  takerApprovals TakerApproval[]

  currentVersionId String           @unique @db.VarChar(255)
  currentVersion   MangroveVersion? @relation("currentVersion", fields: [currentVersionId], references: [id])

  mangroveVersions MangroveVersion[] @relation("mangroveVersion")
  MangroveOrder    MangroveOrder?
  Kandel           Kandel?
}

// Few mangrove instances, no extra index needed

model MangroveVersion {
  id         String   @id @unique @db.VarChar(255)
  mangroveId String   @unique @db.VarChar(255)
  txId       String?  @unique @db.VarChar(255)
  governance String?
  monitor    String?
  vault      String?
  useOracle  Boolean?
  notify     Boolean?
  gasmax     Int?
  gasprice   Int?
  dead       Boolean?

  tx Transaction? @relation(fields: [txId], references: [id])

  versionNumber  Int
  prevVersionId  String?          @unique @db.VarChar(255) // This points to the older version that this version replaces, if any
  prevVersion    MangroveVersion? @relation("prevVersion", fields: [prevVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  nextVersion    MangroveVersion? @relation("prevVersion")
  currentVersion Mangrove?        @relation("currentVersion")
  mangrove       Mangrove?        @relation("mangroveVersion", fields: [mangroveId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

// could potentially have many accounts, maybe extra indexes are needed.

model Account {
  id      String @id @db.VarChar(255)
  chainId Int    @unique @default(80001)
  address String @db.VarChar(80) //index? 

  chain Chain @relation(fields: [chainId], references: [id])

  ownedTakerApprovals   TakerApproval[] @relation("OwnerApprovals")
  spenderTakerApprovals TakerApproval[] @relation("SpenderApprovals")
  offers                Offer[]
  orders                Order[]
  makerBalances         MakerBalance[]

  strat         Strat? // An account may be a strat contract
  MangroveOrder MangroveOrder[]
  Kandel        Kandel?
  Reserve       Reserve?
  kandelOwner   KandelVersion?  @relation("admin")
}

// Problably few strats, no extra indexes needed.

model Strat {
  id String @id @unique @db.VarChar(255)

  account Account @relation(fields: [id], references: [id])

  MangroveOrder MangroveOrder[]
  Kandel        Kandel[]
}

// could potentially have many approvals, extra indexes might be needed.

model TakerApproval {
  id             String @id @db.VarChar(255)
  mangroveId     String @unique @db.VarChar(255)
  offerListingId String @unique @db.VarChar(255)
  ownerId        String @unique @db.VarChar(255) // index?
  spenderId      String @unique @db.VarChar(255) // index?

  mangrove     Mangrove     @relation(fields: [mangroveId], references: [id])
  offerListing OfferListing @relation(fields: [offerListingId], references: [id])
  owner        Account      @relation("OwnerApprovals", fields: [ownerId], references: [id])
  spender      Account      @relation("SpenderApprovals", fields: [spenderId], references: [id])

  currentVersionId String                @unique @db.VarChar(255)
  currentVersion   TakerApprovalVersion? @relation("currentVersion", fields: [currentVersionId], references: [id])

  takerApprovalVersions TakerApprovalVersion[] @relation("takerApprovalVersion")
}

// could potentially have many approvals, extra indexes might be needed.

model TakerApprovalVersion {
  id              String  @id @db.VarChar(255)
  takerApprovalId String  @unique @db.VarChar(255) // index?
  txId            String  @unique @db.VarChar(255) // index?
  parentOrderId   String? @unique @db.VarChar(255)
  value           String  @db.VarChar(80)

  tx          Transaction @relation(fields: [txId], references: [id])
  parentOrder Order?      @relation(fields: [parentOrderId], references: [id])

  versionNumber  Int
  prevVersionId  String?               @unique @db.VarChar(255) // This points to the older version that this version replaces, if any
  prevVersion    TakerApprovalVersion? @relation("prevVersion", fields: [prevVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  nextVersion    TakerApprovalVersion? @relation("prevVersion")
  currentVersion TakerApproval?        @relation("currentVersion")
  takerApproval  TakerApproval         @relation("takerApprovalVersion", fields: [takerApprovalId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

// could potentially have many makers, but extra indexes probably not needed

model MakerBalance {
  id         String @id @db.VarChar(255)
  mangroveId String @unique @db.VarChar(100)
  makerId    String @unique @db.VarChar(255)

  mangrove Mangrove @relation(fields: [mangroveId], references: [id])
  maker    Account  @relation(fields: [makerId], references: [id])

  currentVersionId String               @unique @db.VarChar(255)
  currentVersion   MakerBalanceVersion? @relation("currentVersion", fields: [currentVersionId], references: [id])

  makerBalanceVersions MakerBalanceVersion[] @relation("makerBalanceVersion")
}

// Many makers with many versions, could need extra indexes.

model MakerBalanceVersion {
  id             String @id @db.VarChar(255)
  makerBalanceId String @unique @db.VarChar(255) // index?
  txId           String @unique @db.VarChar(255) // index?
  balance        String @db.VarChar(80)

  tx Transaction @relation(fields: [txId], references: [id])

  versionNumber  Int
  prevVersionId  String?              @unique @db.VarChar(255) // This points to the older version that this version replaces, if any
  prevVersion    MakerBalanceVersion? @relation("prevVersion", fields: [prevVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  nextVersion    MakerBalanceVersion? @relation("prevVersion")
  currentVersion MakerBalance?        @relation("currentVersion")
  makerBalance   MakerBalance         @relation("makerBalanceVersion", fields: [makerBalanceId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

// probably very few offerlists, no extra indexes needed
/// The name should be "OfferList" but Prisma will generate wrong queries if the name ends with "List"
model OfferListing {
  id              String @id @db.VarChar(255)
  mangroveId      String @unique @db.VarChar(255)
  inboundTokenId  String @unique @db.VarChar(255)
  outboundTokenId String @unique @db.VarChar(255)

  mangrove       Mangrove        @relation(fields: [mangroveId], references: [id])
  inboundToken   Token           @relation(name: "OfferListingsByInboundToken", fields: [inboundTokenId], references: [id])
  outboundToken  Token           @relation(name: "OfferListingsByOutboundToken", fields: [outboundTokenId], references: [id])
  offers         Offer[]
  takerApprovals TakerApproval[]
  orders         Order[]

  MangroveOrder        MangroveOrder[]
  currentVersionId     String                @unique @db.VarChar(255)
  currentVersion       OfferListingVersion?  @relation("currentVersion", fields: [currentVersionId], references: [id])
  offerListingVersions OfferListingVersion[] @relation("offerListingVersion")
}

// few offerlist, will have some versions, but not enough for it to need extra indexes

model OfferListingVersion {
  id             String   @id @db.VarChar(255)
  offerListingId String   @unique @db.VarChar(255)
  txId           String   @unique @db.VarChar(255)
  active         Boolean?
  fee            String?  @db.VarChar(80)
  gasbase        Int?
  density        String?  @db.VarChar(80)

  tx Transaction @relation(fields: [txId], references: [id])

  versionNumber  Int
  prevVersionId  String?              @unique @db.VarChar(255) // This points to the older version that this version replaces, if any
  prevVersion    OfferListingVersion? @relation("prevVersion", fields: [prevVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  nextVersion    OfferListingVersion? @relation("prevVersion")
  currentVersion OfferListing?        @relation("currentVersion")
  offerListing   OfferListing         @relation("offerListingVersion", fields: [offerListingId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

// Could potentially have many offers, maybe extra indexes are needed.

model Offer {
  id             String @id @db.VarChar(255)
  mangroveId     String @unique @db.VarChar(255)
  offerListingId String @unique @db.VarChar(255)
  makerId        String @unique @db.VarChar(255) // index?
  offerNumber    Int

  // Instead, we create new versions or mark the offer as deleted, which makes undo easy.

  mangrove      Mangrove        @relation(fields: [mangroveId], references: [id])
  MangroveOrder MangroveOrder[]
  offerListing  OfferListing    @relation(fields: [offerListingId], references: [id])
  maker         Account         @relation(fields: [makerId], references: [id])

  currentVersionId   String             @unique @db.VarChar(255)
  currentVersion     OfferVersion?      @relation("currentVersion", fields: [currentVersionId], references: [id])
  offerVersions      OfferVersion[]     @relation("offerVersion")
  kandelOfferIndexes KandelOfferIndex? @relation("offerIndex")
}

// Many offers, each having many version, we probably need indexes here.

model OfferVersion {
  id             String  @id @db.VarChar(255)
  offerId        String  @unique @db.VarChar(255) // index?
  txId           String  @unique @db.VarChar(255)
  parentOrderId  String? @unique @db.VarChar(255) // index?
  prevOfferId    String? @db.VarChar(255) // what is this?
  deleted        Boolean @default(false) // The offer has been deleted
  wants          String  @db.VarChar(80)
  wantsNumber    Float
  gives          String  @db.VarChar(80)
  givesNumber    Float
  takerPaysPrice Float?
  makerPaysPrice Float?
  gasprice       Int
  gasreq         Int
  live           Boolean
  deprovisioned  Boolean

  tx          Transaction @relation(fields: [txId], references: [id])
  parentOrder Order?      @relation(fields: [parentOrderId], references: [id])

  versionNumber  Int
  prevVersionId  String?       @unique @db.VarChar(255) // This points to the older version that this version replaces, if any
  prevVersion    OfferVersion? @relation("prevVersion", fields: [prevVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  nextVersion    OfferVersion? @relation("prevVersion")
  currentVersion Offer?        @relation("currentVersion")
  offer          Offer         @relation("offerVersion", fields: [offerId], references: [id], onDelete: Restrict, onUpdate: Restrict) // This points to the older version that this version replaces, if any

  TakenOffer TakenOffer[]
}

// could have many orders. probably needs extra indexes.

model Order {
  id              String  @id @db.VarChar(255)
  txId            String  @unique @db.VarChar(255) // index?
  parentOrderId   String? @unique @db.VarChar(255)
  mangroveId      String  @unique @db.VarChar(255)
  offerListingId  String  @unique @db.VarChar(255) // maybe index?
  takerId         String  @unique @db.VarChar(255) // index?
  proximaId       String  @db.VarChar(255)
  // takerWants       String
  // takerWantsNumber Float
  // takerGives       String
  // takerGivesNumber Float
  takerGot        String
  takerGotNumber  Float
  takerGave       String
  takerGaveNumber Float
  takerPaidPrice  Float?
  makerPaidPrice  Float?
  totalFee        String
  totalFeeNumber  Float
  bounty          String
  bountyNumber    Float

  tx          Transaction @relation(fields: [txId], references: [id])
  parentOrder Order?      @relation("ParentOrders", fields: [parentOrderId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  takenOffers                TakenOffer[]
  mangrove                   Mangrove               @relation(fields: [mangroveId], references: [id])
  offerListing               OfferListing           @relation(fields: [offerListingId], references: [id])
  taker                      Account                @relation(fields: [takerId], references: [id])
  childOrders                Order[]                @relation("ParentOrders")
  childTakerApprovalVersions TakerApprovalVersion[]
  childOfferVersions         OfferVersion[]
  MangroveOrder              MangroveOrder[]
}

// With many offers and offer versions, we could have many takenOffers, this probably needs indexes
// Why no reference to the actuall offer( and its version), that was taken?

model TakenOffer {
  id                  String  @id @db.VarChar(255)
  orderId             String  @unique @db.VarChar(255) // index?
  offerVersionId      String  @unique @db.VarChar(255)
  takerGot            String
  takerGotNumber      Float
  takerGave           String
  takerGaveNumber     Float
  takerPaidPrice      Float?
  makerPaidPrice      Float?
  posthookFailed      Boolean
  posthookData        String?
  failReason          String?

  order             Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  offerVersion      OfferVersion       @relation(fields: [offerVersionId], references: [id], onDelete: Cascade)
  TokenBalanceEvent TokenBalanceEvent? 
}

// strats

// potentially many, maybe add index
// Should we not be able to find what orders were created? and what offers were taken?
// We are only able to get the restingOrder.
// - Is this doable by looking up the txId? and finding the orders and offers that way?
//  - - If so, then maybe we need indexes on txId for other tables.

// Clean up and ref orderId

// This should be MangroveOrder and MangroveOrderVersion, with all the parameteres for MangroveOrder

model MangroveOrder {
  id String @id @db.VarChar(255)

  mangroveId       String  @unique @db.VarChar(255)
  stratId          String  @unique @db.VarChar(255)
  offerListingId   String  @unique @db.VarChar(255)
  takerId          String  @unique @db.VarChar(255)
  proximaId        String  @unique @db.VarChar(255)
  orderId          String  @unique @db.VarChar(255)
  restingOrderId   String? @unique @db.VarChar(255) // maybe index?
  restingOrder     Boolean
  fillOrKill       Boolean
  fillWants        Boolean
  takerWants       String
  takerWantsNumber Float
  takerGives       String
  takerGivesNumber Float
  bounty           String
  bountyNumber     Float
  totalFee         String
  totalFeeNumber   Float

  currentVersionId String                @unique @db.VarChar(255)
  currentVersion   MangroveOrderVersion? @relation("currentVersion", fields: [currentVersionId], references: [id])

  mangrove             Mangrove               @relation(fields: [mangroveId], references: [id])
  strat                Strat                  @relation(fields: [stratId], references: [id])
  offerListing         OfferListing           @relation(fields: [offerListingId], references: [id])
  taker                Account                @relation(fields: [takerId], references: [id])
  order                Order                  @relation(fields: [orderId], references: [id])
  offer                Offer?                 @relation(fields: [restingOrderId], references: [id])
  MangroveOrderVersion MangroveOrderVersion[] @relation("mangroveOrderVersion")
}

model MangroveOrderVersion {
  id              String   @id @db.VarChar(255)
  txId            String   @unique @db.VarChar(255)
  mangroveOrderId String   @unique @db.VarChar(255)
  filled          Boolean
  cancelled       Boolean  @default(false)
  failed          Boolean
  failedReason    String?
  takerGot        String
  takerGotNumber  Float
  takerGave       String
  takerGaveNumber Float
  price           Float
  // penalty         String // TODO: Add when available
  // penaltyNumber   Float
  expiryDate      DateTime @db.Timestamp

  tx Transaction @relation(fields: [txId], references: [id])

  versionNumber  Int
  prevVersionId  String?               @unique @db.VarChar(255) // This points to the older version that this version replaces, if any
  prevVersion    MangroveOrderVersion? @relation("prevVersion", fields: [prevVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  nextVersion    MangroveOrderVersion? @relation("prevVersion")
  currentVersion MangroveOrder?        @relation("currentVersion")
  mangroveOrder  MangroveOrder         @relation("mangroveOrderVersion", fields: [mangroveOrderId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model Reserve {
  id        String   @id @db.VarChar(255)
  accountId String   @unique @db.VarChar(255)
  account   Account  @relation(fields: [accountId], references: [id])
  kandel    Kandel[] @relation("reserveId")

  tokenBalances     TokenBalance[]      @relation("reserve")
  TokenBalanceEvent TokenBalanceEvent[]
}

model TokenBalance {
  id        String @id @db.VarChar(255)
  txId      String @unique @db.VarChar(255)
  reserveId String @unique @db.VarChar(255)
  tokenId   String @unique @db.VarChar(255)

  currentVersionId String                @unique @db.VarChar(255)
  currentVersion   TokenBalanceVersion?  @relation("currentVersion", fields: [currentVersionId], references: [id])
  token            Token                 @relation(fields: [tokenId], references: [id])
  reserve          Reserve               @relation("reserve", fields: [reserveId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Transaction      Transaction?          @relation(fields: [txId], references: [id])
  allBalances      TokenBalanceVersion[] @relation("tokenBalance")

  @@unique([reserveId, tokenId])
}

model TokenBalanceEvent {
  id                    String  @id @default(uuid())
  reserveId             String  @unique @db.VarChar(255)
  kandelId              String? @unique @db.VarChar(255)
  tokenId               String  @unique @db.VarChar(255)
  tokenBalanceVersionId String  @unique @db.VarChar(255)
  takenOfferId String?  @unique @db.VarChar(255)

  tokenBalanceVersion TokenBalanceVersion @relation(fields: [tokenBalanceVersionId], references: [id], onDelete: Cascade)
  token               Token               @relation(fields: [tokenId], references: [id])

  kandel                      Kandel?                      @relation(fields: [kandelId], references: [id])
  reserve                     Reserve                      @relation(fields: [reserveId], references: [id])
  TokenBalanceDepositEvent    TokenBalanceDepositEvent?
  TokenBalanceWithdrawalEvent TokenBalanceWithdrawalEvent?
  takenOffer                  TakenOffer?                  @relation(fields: [takenOfferId], references: [id], onDelete: Cascade)
}

model TokenBalanceDepositEvent {
  id                  String                  @id @default(uuid())
  tokenBalanceEventId String                  @unique @db.VarChar(255)
  tokenBalanceEvent   TokenBalanceEvent       @relation(fields: [tokenBalanceEventId], references: [id], onDelete: Cascade)
  source              TokenBalanceEventSource
  value               String
}

model TokenBalanceWithdrawalEvent {
  id                  String                  @id @default(uuid())
  tokenBalanceEventId String                  @unique @db.VarChar(255)
  tokenBalanceEvent   TokenBalanceEvent       @relation(fields: [tokenBalanceEventId], references: [id], onDelete: Cascade)
  source              TokenBalanceEventSource
  value               String
}

enum TokenBalanceEventSource {
  KANDEL
  OTHER
}

model TokenBalanceVersion {
  id             String @id @db.VarChar(255)
  txId           String @unique @db.VarChar(255)
  tokenBalanceId String @unique @db.VarChar(255)
  deposit        String
  withdrawal     String
  spent          String
  earned         String
  balance        String

  tx           Transaction  @relation(fields: [txId], references: [id])
  tokenBalance TokenBalance @relation("tokenBalance", fields: [tokenBalanceId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  versionNumber     Int
  prevVersionId     String?              @unique @db.VarChar(255) // This points to the older version that this version replaces, if any
  prevVersion       TokenBalanceVersion? @relation("prevVersion", fields: [prevVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  nextVersion       TokenBalanceVersion? @relation("prevVersion")
  curreVersion      TokenBalance?        @relation("currentVersion")
  TokenBalanceEvent TokenBalanceEvent?

  @@unique([tokenBalanceId, versionNumber])
}

model Kandel {
  id         String @id @db.VarChar(255)
  mangroveId String @unique @db.VarChar(255)
  stratId    String @unique @db.VarChar(255)
  baseId     String @unique @db.VarChar(255)
  quoteId    String @unique @db.VarChar(255)
  accountId  String @unique @db.VarChar(255)
  reserveId  String @unique @db.VarChar(255) // create reserve object
  type       String

  currentVersionId   String              @unique @db.VarChar(255)
  currentVersion     KandelVersion?      @relation("currentVersion", fields: [currentVersionId], references: [id])
  baseToken          Token               @relation("base", fields: [baseId], references: [id])
  quoteToken         Token               @relation("quote", fields: [quoteId], references: [id])
  mangrove           Mangrove            @relation(fields: [mangroveId], references: [id])
  account            Account             @relation(fields: [accountId], references: [id])
  strat              Strat               @relation(fields: [stratId], references: [id])
  reserve            Reserve?            @relation("reserveId", fields: [reserveId], references: [id])
  kandelVersions     KandelVersion[]     @relation("kandelVersion")
  kandelOfferIndexes KandelOfferIndex[]  @relation("offerIndex")
  KandelEvent        KandelEvent[]
  TokenBalanceEvent  TokenBalanceEvent[]
}

model KandelOfferIndex {
  offerId  String @unique @db.VarChar(255)
  kandelId String @unique @db.VarChar(255)
  txId     String @unique @db.VarChar(255)
  index    Int
  ba       String

  offer  Offer       @relation("offerIndex", fields: [offerId], references: [id])
  kandel Kandel      @relation("offerIndex", fields: [kandelId], references: [id])
  tx     Transaction @relation(fields: [txId], references: [id])

  @@id([offerId, kandelId, ba])
}

model KandelEvent {
  id              String @id @default(uuid())
  kandelVersionId String @unique @db.VarChar(255)
  kandelId        String @unique @db.VarChar(255)

  kandel                     Kandel                      @relation(fields: [kandelId], references: [id])
  KandelVersion              KandelVersion               @relation("kandelVersion", fields: [kandelVersionId], references: [id], onDelete: Cascade)
  compoundRateEvent          KandelCompoundRateEvent?
  gasPriceEvent              KandelGasPriceEvent?
  KandelGasReqEvent          KandelGasReqEvent?
  KandelGeometricParamsEvent KandelGeometricParamsEvent?
  KandelLengthEvent          KandelLengthEvent?
  KandelAdminEvent           KandelAdminEvent?
  KandelRouterEvent          KandelRouterEvent?
  KandelPopulateEvent        KandelPopulateEvent?
  NewKandelEvent             NewKandelEvent?
}

model KandelCompoundRateEvent {
  id                String      @id @default(uuid())
  eventId           String      @unique @db.VarChar(255)
  compoundRateBase  String
  compoundRateQuote String
  event             KandelEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model KandelGasPriceEvent {
  id       String      @id @default(uuid())
  eventId  String      @unique @db.VarChar(255)
  gasPrice String
  event    KandelEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model KandelGasReqEvent {
  id      String      @id @default(uuid())
  eventId String      @unique @db.VarChar(255)
  gasReq  String
  event   KandelEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model KandelGeometricParamsEvent {
  id      String      @id @default(uuid())
  eventId String      @unique @db.VarChar(255)
  ratio   String
  spread  String
  event   KandelEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model KandelLengthEvent {
  id      String      @id @default(uuid())
  eventId String      @unique @db.VarChar(255)
  length  Int
  event   KandelEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model KandelAdminEvent {
  id      String      @id @default(uuid())
  eventId String      @unique @db.VarChar(255)
  admin   String
  event   KandelEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model KandelRouterEvent {
  id      String      @id @default(uuid())
  eventId String      @unique @db.VarChar(255)
  router  String
  event   KandelEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model NewKandelEvent {
  id      String      @id @default(uuid())
  eventId String      @unique @db.VarChar(255)
  event   KandelEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model KandelPopulateEvent {
  id      String      @id @default(uuid())
  eventId String      @unique @db.VarChar(255)
  event   KandelEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model KandelVersion {
  id              String @id @db.VarChar(255)
  kandelId        String @unique @db.VarChar(255)
  txId            String @unique @db.VarChar(255)
  congigurationId String @unique @db.VarChar(255)
  adminId         String @unique @db.VarChar(255)

  routerAddress String @db.VarChar(255)

  tx            Transaction         @relation(fields: [txId], references: [id])
  configuration KandelConfiguration @relation(fields: [congigurationId], references: [id])
  admin         Account             @relation("admin", fields: [adminId], references: [id])
  event         KandelEvent?        @relation("kandelVersion")

  versionNumber  Int
  prevVersionId  String?        @unique @db.VarChar(255) // This points to the older version that this version replaces, if any
  prevVersion    KandelVersion? @relation("prevVersion", fields: [prevVersionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  nextVersion    KandelVersion? @relation("prevVersion")
  currentVersion Kandel?        @relation("currentVersion")
  kandel         Kandel         @relation("kandelVersion", fields: [kandelId], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model KandelConfiguration {
  id                String          @id @default(uuid())
  compoundRateBase  String // Are these big numbers?
  compoundRateQuote String // Are these big numbers?
  gasPrice          String
  gasReq            String
  spread            String
  ratio             String
  length            Int
  KandelVersion     KandelVersion[]
}

// store consumed streams offsets
model Streams {
  id     String @id @db.VarChar(255)
  offset String @db.VarChar(255)
}
